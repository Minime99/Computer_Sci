#while/for
'''
A For loop does not run forever.
It only runs as many times as needed to get through the range given (in this case, it is the list called 'numbers')
A While loops go as long as the given condition is satisfied.
'''

numbers = [1,10,20,30,40,50]
sum = 0
for x in numbers:
    sum = sum + x
print(sum)

'''
^ The 'for' loop iterates through the list of numbers.
The 'sum = sum + x' adds each value of 'x' … which is each number in the list… to the 'sum' variable.
Then, in the end, the sum is printed out. It is 151 in this case.

'''

numbers = [1,10,20,30,40,50]
sum = 0
for x in numbers:
    sum = x
print(sum)

'''
^ In this case, 'sum' is not a running total. It’s just copying the value of x every time the loop runs.
So, in the end, the final value x ever takes is '50', so sum is 50, and the print(sum) outputs 50 too.
'''

a = 0
while a < 10:
    a = a + 1
    print(a)

'''
^ 'while' loops go as long as the given condition is satisfied.
In this case, 'a' starts at 0, which is less than 10, so 'a' gets notched up but 1 then printed out.
The final value of “a” that satisfies this While loop is 9. So 9 gets notched up 1 to 10, then printed out. This prints out 1 to 10.
'''

a = 0
while a < 10:
    print(a)
    a = a + 1

'''
^ Here, the 'notching' gets done AFTER the printing.
So it prints 0 to 9 instead, and when a is 9, it is printed, then increased to 10, which FAILS the condition of the while loop and so the code block finishes.
'''



#error exception handling

def getkids():
    try:                        #Python attempts to execute this code line by line.
        x = int(input("how many kids do you have? "))
    except:                     #This line will only run if there are errors
        return("Error")         #Return sends information BACK to wherever the function had been called.
    else:                       #This line will only run if there are NO errors
        return(x)
    finally:                    #This code runs no matter what. Even before the value is 'returned' to wherever the function was originally called upon.
        print("This always prints")
print(getkids())                #This prints out anything that was 'returned' by the function getkids()



#Functions

PI = 3.14159265358979
def circleArea(radius):                 #A number is “passed” into the function. In this case, 5.
    return PI*radius*radius             #that “passed” value is used here.
# A calculation is made (it is 78.something) and “returned” to wherever the function had been called
print('circle area with radius 5:')
print(circleArea(5))                    #The '5' is passed. 5 is now radius. It replaces radius because it is in brackets.

def f(x):
    return x+2
print(f(3))



#Class/Objects

'''
A class is a template of methods and attributes
    A method is any defined statement (def)
    A attribute is a variable
    __init__ means when a object is made, this method is run automatically, before anything
Objects are a collection of attributes and methods based on a class. The values are personalized to the object.
An instance is a an object of that particular type of class
'''

class Cal():                                    #A class is a template to create collections of attributes and methods aka A template to create “objects”
    pi = 3.142                                  #This is an attribute (attribute is a fancy word for “variable” within a class/object.
    def __init__(self, radius):
        self.radius = radius
    def area(self):                             #This is an instance method. It is a method ('def' statement) that can be called by any Cal object.
        return self.pi * (self.radius ** 2)
a = Cal(32)                                     #This creates a 'Cal' object and names is 'a'
print(a.area())



#Date Time

import datetime                     #you need this to use datetime
x = datetime.datetime.now()         #this stores the current date and time in a variable “x”
#The first datetime represents the import of library. The second datetime is a class. The now is a method in datetime class.
print(x)                            #prints it out. When I made this, it was 2018-11-12 17:33:58.930763



#String Formatting

print('memes'.capitalize())     #Capitalize first letter

print('memes'.center(10))       #Move the output to the right by the amount set

print('memes'.upper())          #Make every letter in string uppercase

print('MEMES'.lower())          #Make every letter in string lowercase

print('matamata'.count('a'))    #Counts number of specific letter in word

print('memes'.replace('e','$')) #Replaces a certain character in a string with another character
